
BITS 16
ORG 100h
section .data

filename    db 'data.txt', 0
prompt_name db 'Name: $'
prompt_phone db 'Phone: $'
menu        db '1. Add', 13, 10, '2. Search', 13, 10, '3. List', 13, 10, '4. Exit', 13, 10, '$'
choice_msg  db 'Your choice: $'
not_found   db 'Not Found.', 13, 10, '$'
newline     db 13, 10
space       db ' '
error_msg   db 'Error.', 13, 10, '$'

section .bss

name        resb 50
phone       resb 20
buffer      resb 128
input_buffer resb 130   
file_handle resw 1      

section .text

start:

main_menu:
    mov dx, menu
    mov ah, 09h
    int 21h


    mov dx, choice_msg
    mov ah, 09h
    int 21h

    
    mov ah, 01h
    int 21h
    sub al, '0'    

    cmp al, 1
    je add_record
    cmp al, 2
    je search_record
    cmp al, 3
    je list_records
    cmp al, 4
    je exit_program
    jmp main_menu

add_record:
    mov dx, prompt_name
    mov ah, 09h
    int 21h
    call read_line
    mov si, buffer
    mov di, name
    call copy_string
    
    mov dx, prompt_phone
    mov ah, 09h
    int 21h
    call read_line
    mov si, buffer
    mov di, phone
    call copy_string

   
    mov ah, 3Dh       
    mov al, 0x02      
    mov dx, filename
    int 21h
    jc create_file    

    mov [file_handle], ax  

write_record:
    mov ah, 42h        
    mov al, 2          
    xor cx, cx
    xor dx, dx
    mov bx, [file_handle]
    int 21h

    mov si, name      
    call strlen
    mov cx, ax
    mov dx, name
    mov bx, [file_handle]
    mov ah, 40h       
    int 21h

    mov dx, space
    mov cx, 1
    mov bx, [file_handle]
    mov ah, 40h
    int 21h

    mov si, phone
    call strlen
    mov cx, ax
    mov dx, phone
    mov bx, [file_handle]
    mov ah, 40h
    int 21h

    mov dx, newline
    mov cx, 2
    mov bx, [file_handle]
    mov ah, 40h
    int 21h

    mov ah, 3Eh
    mov bx, [file_handle]
    int 21h

    jmp main_menu

create_file:
    mov ah, 3Ch       
    mov cx, 0         
    mov dx, filename
    int 21h
    jc error_handler
    mov [file_handle], ax
    jmp write_record

search_record:
    mov dx, prompt_name
    mov ah, 09h
    int 21h
    call read_line
    mov si, buffer

    mov ah, 3Dh       
    mov al, 0        
    mov dx, filename
    int 21h
    jc error_handler
    mov [file_handle], ax

search_loop:
    mov ah, 3Fh     
    mov bx, [file_handle]
    mov dx, buffer
    mov cx, 128
    int 21h
    jc end_search
    cmp ax, 0
    je end_search

    mov di, buffer
    call compare_name
    cmp al, 1
    je found_record
    jmp search_loop

found_record:
    mov dx, buffer
    mov ah, 09h
    int 21h
    jmp close_file

end_search:
    mov dx, not_found
    mov ah, 09h
    int 21h

close_file:
    mov ah, 3Eh
    mov bx, [file_handle]
    int 21h
    jmp main_menu

list_records:
    mov ah, 3Dh
    mov al, 0         
    mov dx, filename
    int 21h
    jc error_handler
    mov [file_handle], ax

list_loop:
    mov ah, 3Fh    
    mov bx, [file_handle]
    mov dx, buffer
    mov cx, 128
    int 21h
    jc end_list
    cmp ax, 0
    je end_list

    mov dx, buffer
    mov ah, 09h
    int 21h
    jmp list_loop

end_list:
    mov ah, 3Eh
    mov bx, [file_handle]
    int 21h
    jmp main_menu

exit_program:
    mov ah, 4Ch
    int 21h

error_handler:
    mov dx, error_msg
    mov ah, 09h
    int 21h
 
    mov ax, [file_handle]
    cmp ax, 0
    je skip_close
    mov ah, 3Eh
    mov bx, ax
    int 21h

skip_close:

    jmp main_menu

read_line:
    mov byte [input_buffer], 127 
    mov dx, input_buffer
    mov ah, 0Ah
    int 21h

    lea si, [input_buffer+2]
    lea di, buffer
    mov cl, [input_buffer+1]
    mov ch, 0
    rep movsb
    mov byte [di], '$'
    ret

copy_string:
    push si
    push di
    cld

copy_loop:
    lodsb        
    stosb           
    cmp al, '$'        
    jne copy_loop
    pop di
    pop si
    ret

strlen:
    push si
    xor ax, ax       
      
strlen_loop:
    lodsb               
    cmp al, '$'         
    je strlen_end
    inc ax             
    jmp strlen_loop

strlen_end:
    pop si
    ret

compare_name:
    push si
    push di
    cld

compare_loop:
    lodsb               
    cmp al, ' '        
    je compare_end
    cmp al, [di]      
    jne not_equal
    inc di
    jmp compare_loop

compare_end:
    mov al, 1          
    pop di
    pop si
    ret

not_equal:
    mov al, 0          
    pop di
    pop si
    ret
